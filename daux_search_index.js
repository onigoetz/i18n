load_search_index({"pages":[{"title":"I18N","text":"#I18n #@onigoetz\/i18n A suite of packages to ease your translation needs. #Packages @onigoetz\/messageformat a MessageFormat parsing and rendering library @onigoetz\/make-plural a lighter fork of make-plural meant for browser usage @onigoetz\/intl-formatters default formatters if you don\u2019t already have formatters for dates and numbers, uses the standard Intl API #Features Small, Fast and no NPM dependencies TypeScript \u2764\ufe0f Fully tested Flexible; Use one package, or two, bring your own formatters, or use the embedded ones, use on Node.js, or in the browser. You choose ! ICU MessageFormat compatible CLDR compatible #Example import { parse, createRenderer } from \"@onigoetz\/messageformat\"; import { dateFormatter, numberFormatter, pluralGenerator } from \"@onigoetz\/intl-formatters\"; \/\/ Parse the MessageFormat to a renderable format const parsed = parse(\"{test, plural, offset:3 one{one test} other {# test} }\"); \/\/ Create a localized renderer const render = createRenderer( \"en\", (locale: T, type) =&gt; pluralGenerator(locale, { type }), (locale: T, options, value: number) =&gt; numberFormatter(locale, options)(value), (locale: T, options, value: Date) =&gt; dateFormatter(locale, options)(value) ); render(parsed, { test: 4 }); \/\/ =&gt; \"one test\" render(parsed, { test: 7 }); \/\/ =&gt; \"4 test\" #Who is the audience for this library ? This library is meant for applications starting with medium scale, where you might have multiple libraries and frameworks inside. Since these libraries don\u2019t make any assumption about your stack, you can integrate them in any kind of application. Most importantly, if you have an environment where pre-compiling translations isn\u2019t possible, for example because your translation build process is separate from your app build process or you have a modular application \/ microfrontend. This library is very interesting as a lightweight runtime because of its small footprint and performant parsing. #Inspiration This suite of packages certainly wouldn\u2019t exist without the previous work in the field. This package forked make-plural at version 4 to make it smaller. Took inspiration for the MessageFormat parser from @ffz\/icu-msgparser for its small size and @phensley\/messageformat for its parsing speed.","tags":"","url":"index.html"},{"title":"intl-formatters","text":"This package provides simple implementations for Messageformat using the Intl API. #Features Numbers and currencies: https:\/\/developer.mozilla.org\/fr\/docs\/Web\/JavaScript\/Reference\/Objets_globaux\/Intl\/NumberFormat Dates: https:\/\/developer.mozilla.org\/fr\/docs\/Web\/JavaScript\/Reference\/Objets_globaux\/Intl\/DateTimeFormat Relative Time: https:\/\/developer.mozilla.org\/fr\/docs\/Web\/JavaScript\/Reference\/Objets_globaux\/Intl\/RelativeTimeFormat Plurals: https:\/\/developer.mozilla.org\/fr\/docs\/Web\/JavaScript\/Reference\/Objets_globaux\/Intl\/PluralRules #How to use These formatters are best used in conjunction with @onigoetz\/messageformat. However they are fully Typed and you may use them for any other use. import { parse, createRenderer } from \"@onigoetz\/messageformat\"; import { dateFormatter, numberFormatter, pluralGenerator, } from \"@onigoetz\/intl-formatters\"; \/\/ Parse the MessageFormat to a renderable format const parsed = parse(\"{test, plural, offset:3 one{one test} other {# test} }\"); \/\/ Create a localized renderer const render = createRenderer( \"en\", (locale: T, type) =&gt; pluralGenerator(locale, { type }), (locale: T, options, value: number) =&gt; numberFormatter(locale, options)(value), (locale: T, options, value: Date) =&gt; dateFormatter(locale, options)(value) ); render(parsed, { test: 4 }); \/\/ =&gt; \"one test\" render(parsed, { test: 7 }); \/\/ =&gt; \"4 test\" #For NodeJS If you do some generation using NodeJS and wish to use locales other than en. I strongly suggest you look at the following page : https:\/\/nodejs.org\/api\/intl.html#intl_providing_icu_data_at_runtime This page explains how to make sure you have all the right locales loaded to make your formatting. #Browser Support #Intl Base API (Dates, Numbers, Currencies, Relative Time) #Plurals","tags":"","url":"Packages\/intl_formatters.html"},{"title":"make-plural","text":"This package is a fork of make-plural version 4. It provided a compiler for CLDR plurals, but it also contained a lot of methods to test them. I stripped the test methods and kept the conversion code to make it smaller. #Usage import makePlural from \"@onigoetz\/make-plural\"; \/\/ Original CLDR data const pluralRules = { \"plurals-type-cardinal\": { en: { \"pluralRule-count-one\": \"i = 1 and v = 0 @integer 1\", \"pluralRule-count-other\": \" @integer 0, 2~16, 100, 1000, 10000, 100000, 1000000, \u2026 @decimal 0.0~1.5, 10.0, 100.0, 1000.0, 10000.0, 100000.0, 1000000.0, \u2026\" } }, \"plurals-type-ordinal\": { en: { \"pluralRule-count-one\": \"n % 10 = 1 and n % 100 != 11 @integer 1, 21, 31, 41, 51, 61, 71, 81, 101, 1001, \u2026\", \"pluralRule-count-two\": \"n % 10 = 2 and n % 100 != 12 @integer 2, 22, 32, 42, 52, 62, 72, 82, 102, 1002, \u2026\", \"pluralRule-count-few\": \"n % 10 = 3 and n % 100 != 13 @integer 3, 23, 33, 43, 53, 63, 73, 83, 103, 1003, \u2026\", \"pluralRule-count-other\": \" @integer 0, 4~18, 100, 1000, 10000, 100000, 1000000, \u2026\" } } }; const pluralGenerator = makePlural(pluralRules[\"plurals-type-ordinal\"][\"en\"]); console.log(pluralGenerator(3)) \/\/ =&gt; few #Size optimization The original CLDR data is quite verbose and if you can preprocess it, a lot of data can be removed. You can remove anything after @decimal or @integer and the other rule, you can go from : { \"plurals-type-cardinal\": { \"en\": { \"pluralRule-count-one\": \"i = 1 and v = 0 @integer 1\", \"pluralRule-count-other\": \" @integer 0, 2~16, 100, 1000, 10000, 100000, 1000000, \u2026 @decimal 0.0~1.5, 10.0, 100.0, 1000.0, 10000.0, 100000.0, 1000000.0, \u2026\" } }, \"plurals-type-ordinal\": { \"en\": { \"pluralRule-count-one\": \"n % 10 = 1 and n % 100 != 11 @integer 1, 21, 31, 41, 51, 61, 71, 81, 101, 1001, \u2026\", \"pluralRule-count-two\": \"n % 10 = 2 and n % 100 != 12 @integer 2, 22, 32, 42, 52, 62, 72, 82, 102, 1002, \u2026\", \"pluralRule-count-few\": \"n % 10 = 3 and n % 100 != 13 @integer 3, 23, 33, 43, 53, 63, 73, 83, 103, 1003, \u2026\", \"pluralRule-count-other\": \" @integer 0, 4~18, 100, 1000, 10000, 100000, 1000000, \u2026\" } } } to : { \"plurals-type-cardinal\": { \"en\": { \"pluralRule-count-one\": \"i = 1 and v = 0\" } }, \"plurals-type-ordinal\": { \"en\": { \"pluralRule-count-one\": \"n % 10 = 1 and n % 100 != 11\", \"pluralRule-count-two\": \"n % 10 = 2 and n % 100 != 12\", \"pluralRule-count-few\": \"n % 10 = 3 and n % 100 != 13\" } } } #Efficient pluralGenerator If you need to create many plural generators, parsing the CLDR data many times isn\u2019t efficient. You can create a small factory function like this: const pluralRules = {}; \/\/ CLDR data const pluralMemory = {}; function pluralGenerator(locale, type) { const key = `${locale}-${type}`; if (!pluralMemory.hasOwnProperty(key)) { pluralMemory[key] = makePlural( pluralRules[`plurals-type-${type}`][locale] ); } return pluralMemory[key]; }","tags":"","url":"Packages\/make_plural.html"},{"title":"messageformat","text":"","tags":"","url":"Packages\/messageformat.html"},{"title":"Specification","text":"This is an overview of the specification of MessageFormat. It seems that each language has a different specification for how MessageFormat needs to be parsed and rendered. This page will try to make a recap of what I understand and how that translate in practical usage. The rest of this page is in progress message = messageText (argument messageText)* argument = noneArg | simpleArg | complexArg complexArg = choiceArg | pluralArg | selectArg | selectordinalArg noneArg = '{' argNameOrNumber '}' simpleArg = '{' argNameOrNumber ',' argType [',' argStyle] '}' choiceArg = '{' argNameOrNumber ',' &quot;choice&quot; ',' choiceStyle '}' pluralArg = '{' argNameOrNumber ',' &quot;plural&quot; ',' pluralStyle '}' selectArg = '{' argNameOrNumber ',' &quot;select&quot; ',' selectStyle '}' selectordinalArg = '{' argNameOrNumber ',' &quot;selectordinal&quot; ',' pluralStyle '}' choiceStyle: see ChoiceFormat pluralStyle: see PluralFormat selectStyle: see SelectFormat argNameOrNumber = argName | argNumber argName = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+ argNumber = '0' | ('1'..'9' ('0'..'9')*) argType = &quot;number&quot; | &quot;date&quot; | &quot;time&quot; | &quot;spellout&quot; | &quot;ordinal&quot; | &quot;duration&quot; argStyle = &quot;short&quot; | &quot;medium&quot; | &quot;long&quot; | &quot;full&quot; | &quot;integer&quot; | &quot;currency&quot; | &quot;percent&quot; | argStyleText | &quot;::&quot; argSkeletonText messageText can contain quoted literal strings including syntax characters. A quoted literal string begins with an ASCII apostrophe and a syntax character (usually a {curly brace}) and continues until the next single apostrophe. A double ASCII apostrohpe inside or outside of a quoted string represents one literal apostrophe. Quotable syntax characters are the {curly braces} in all messageText parts, plus the '#' sign in a messageText immediately inside a pluralStyle, and the '|' symbol in a messageText immediately inside a choiceStyle. See also MessagePattern.ApostropheMode In argStyleText, every single ASCII apostrophe begins and ends quoted literal text, and unquoted {curly braces} must occur in matched pairs. https:\/\/unicode-org.github.io\/icu-docs\/apidoc\/released\/icu4j\/com\/ibm\/icu\/text\/MessageFormat.html https:\/\/github.com\/unicode-org\/icu\/blob\/2666d18e544271d0f756bf20ee251c2cb699e269\/icu4j\/main\/classes\/core\/src\/com\/ibm\/icu\/text\/MessagePattern.java https:\/\/github.com\/unicode-org\/icu\/blob\/2666d18e544271d0f756bf20ee251c2cb699e269\/icu4j\/main\/classes\/core\/src\/com\/ibm\/icu\/impl\/PatternProps.java","tags":"","url":"Specification.html"},{"title":"Benchmark messageformat","text":"#MessageFormat parse and render benchmark In this benchmark we\u2019ll look at two metrics : Library size and parsing\/rendering speed. Like any synthetic benchmark these should be taken with a pinch of salt. I tried to compare apples with apples as much as possible, but some libraries do a bit more and some others do a bit less. Feel free to make a PR to help make these comparisons as fair as possible. As a final word, I made this comparison purely for fun and to learn a thing or two about performance optimization. #Libraries size Sources can be found in src, measure taken on 07\/12\/2023 with latest available versions Npm Package Version Size Comment @ffz\/icu-msgparser (+ custom renderer) 2.0.0 10K @onigoetz\/messageformat (+ @onigoetz\/intl-formatters) 0.1.0 11K @onigoetz\/messageformat (+ @onigoetz\/make-plural) 0.1.0 13K format-message-parse 6.2.4 22K Uses peg.js @onigoetz\/messageformat (+ make-plural) 0.1.0 28K @onigoetz\/messageformat (+ @phensley\/plurals) 0.1.0 45K intl-messageformat 10.5.8 58K Uses peg.js @phensley\/messageformat 1.8.0 62K @messageformat\/core 3.3.0 74K Uses peg.js globalize 1.7.0 157K Uses peg.js Notes: globalize comes with a bundled version of messageformat 0.3.0 and make-plural 3.0.0. Also, it requires ICU data to know how to format numbers, currencies, timezones and more. It also comes with a compiler to remove the parts that aren\u2019t required, but for my use case I consider that we can\u2019t know in advance what is going to be formatted. @ffz\/icu-msgparser is only a parser, I added a renderer to it but did not add any number\/date formatter (hence the comparatively small size). @eo-locale\/core was excluded from this list as it crashes on our valid test strings. It would be a strong contender as it has a very small footprint (6.7KB). #Benchmark To make the benchmark compareable I tried to apply the same rules to all libraries. Each libraries must follow the same rules: Parse and format a string. Properly handles plurals. Do not perform any number or date formatting since not all libraries support them and it would give a serious boost to those. Give the same output as all other implementations. Compiled with the same tools and options. Use an identical method signature for all libraries. The benchmark is applied to 4 different strings, which for the simple cases should be fairly common in applications and more advanced case are probably not as common but should still be performant. Benchmarks run on Node.js v20.9.0 Apple M2 CPU December 7, 2023 #Simple String const input = [`Hello, world!`, {}]; \/\/ Renders: `Hello, world!` Name ops\/sec MoE Runs sampled @onigoetz\/messageformat (+ @onigoetz\/make-plural) 9,509,221 \u00b1 0.06% 101 @onigoetz\/messageformat (+ @phensley\/plurals) 9,495,148 \u00b1 0.08% 98 @onigoetz\/messageformat (+ @onigoetz\/intl-formatters) 9,391,095 \u00b1 0.15% 95 @onigoetz\/messageformat (+ make-plural) 8,313,129 \u00b1 0.16% 101 format-message-parse 7,876,460 \u00b1 0.16% 100 @ffz\/icu-msgparser (+ custom renderer) 5,778,380 \u00b1 0.06% 101 @phensley\/messageformat 5,507,993 \u00b1 0.20% 99 @messageformat\/core 1,198,320 \u00b1 0.22% 98 intl-messageformat 226,912 \u00b1 0.92% 88 globalize 37,695 \u00b1 0.29% 93 #With one variable const input = [ `Hello, {name}!`, { name: \"John\", }, ]; \/\/ Renders: `Hello, John!` Name ops\/sec MoE Runs sampled @onigoetz\/messageformat (+ @onigoetz\/intl-formatters) 4,418,002 \u00b1 0.09% 99 @onigoetz\/messageformat (+ @onigoetz\/make-plural) 4,353,950 \u00b1 0.19% 101 @onigoetz\/messageformat (+ @phensley\/plurals) 4,343,249 \u00b1 0.18% 100 @onigoetz\/messageformat (+ make-plural) 4,242,189 \u00b1 0.07% 102 format-message-parse 3,423,637 \u00b1 0.16% 100 @ffz\/icu-msgparser (+ custom renderer) 3,365,181 \u00b1 0.20% 102 @phensley\/messageformat 2,819,977 \u00b1 0.08% 100 @messageformat\/core 713,582 \u00b1 0.20% 98 intl-messageformat 199,774 \u00b1 1.12% 92 globalize 36,924 \u00b1 0.13% 98 #With plurals const input = [ `Yo, {firstName} {lastName} has {numBooks} {numBooks, plural, one {book} other {books}}.`, { firstName: \"John\", lastName: \"Constantine\", numBooks: 5, }, ]; \/\/ Renders: `Yo, John Constantine has 5 books.` Name ops\/sec MoE Runs sampled @onigoetz\/messageformat (+ @phensley\/plurals) 611,423 \u00b1 0.06% 98 @onigoetz\/messageformat (+ make-plural) 611,052 \u00b1 0.12% 97 @onigoetz\/messageformat (+ @onigoetz\/intl-formatters) 551,116 \u00b1 0.08% 96 @phensley\/messageformat 519,670 \u00b1 0.15% 97 @messageformat\/core 170,824 \u00b1 0.13% 95 @onigoetz\/messageformat (+ @onigoetz\/make-plural) 140,027 \u00b1 0.20% 101 @ffz\/icu-msgparser (+ custom renderer) 129,570 \u00b1 0.10% 96 format-message-parse 81,600 \u00b1 0.19% 97 intl-messageformat 46,911 \u00b1 1.88% 92 globalize 27,326 \u00b1 0.20% 96 #With select and plurals const input = [` {gender_of_host, select, female { {num_guests, plural, offset:1 =0 {{host} does not give a party.} =1 {{host} invites {guest} to her party.} =2 {{host} invites {guest} and one other person to her party.} other {{host} invites {guest} and # other people to her party.} } } male { {num_guests, plural, offset:1 =0 {{host} does not give a party.} =1 {{host} invites {guest} to his party.} =2 {{host} invites {guest} and one other person to his party.} other {{host} invites {guest} and # other people to his party.} } } other { {num_guests, plural, offset:1 =0 {{host} does not give a party.} =1 {{host} invites {guest} to their party.} =2 {{host} invites {guest} and one other person to their party.} other {{host} invites {guest} and # other people to their party.} } } } `, { \"gender_of_host\": \"male\", \"num_guests\": 3, \"host\": \"Lucifer\", \"guest\": \"John Constantine\" }]; \/\/ Renders: ` Lucifer invites John Constantine and 2 other people to his party. ` Name ops\/sec MoE Runs sampled @onigoetz\/messageformat (+ @phensley\/plurals) 94,310 \u00b1 0.06% 98 @onigoetz\/messageformat (+ make-plural) 94,325 \u00b1 0.20% 100 @onigoetz\/messageformat (+ @onigoetz\/intl-formatters) 92,259 \u00b1 0.10% 101 @onigoetz\/messageformat (+ @onigoetz\/make-plural) 61,412 \u00b1 0.32% 100 @phensley\/messageformat 52,901 \u00b1 0.06% 98 @messageformat\/core 30,031 \u00b1 0.08% 98 @ffz\/icu-msgparser (+ custom renderer) 29,234 \u00b1 0.73% 98 format-message-parse 17,066 \u00b1 2.83% 93 intl-messageformat 16,619 \u00b1 0.93% 94 globalize 8,723 \u00b1 0.90% 99","tags":"","url":"Benchmark_messageformat.html"},{"title":"Benchmark plural","text":"#plural benchmarks In this benchmark we\u2019ll look at two metrics : Library size and speed. When doing the other benchmark in this repository I saw that what was taking most of the time wasn\u2019t the parsing or rendering of messageformat but the different formatters and plurals generators. I was curious about how different they were. #Libraries size Sources can be found in src, measure taken on 25\/06\/2020 With latest available versions Npm Package Version Size Comment @onigoetz\/intl-formatters 0.1.0 3.9K Embeds the formatters in the runtime @onigoetz\/make-plural 0.1.0 6.6K Contains only the formatter for en in this example, have to be shipped separately. make-plural 7.3.0 20K Contains all locales @phensley\/plurals 1.7.3 48K Contains all locales Benchmarks run on Node.js v20.9.0 Apple M2 CPU November 7, 2023 #Ordinal const input = [`ordinal`, `en`, 2]; \/\/ Renders: `two` Name ops\/sec MoE Runs sampled make-plural 14,310,209 \u00b1 0.71% 96 @phensley\/plurals 12,529,550 \u00b1 0.24% 102 @onigoetz\/make-plural(memo) 11,836,619 \u00b1 0.37% 101 @onigoetz\/intl 2,143,555 \u00b1 0.35% 98 @onigoetz\/make-plural 56,021 \u00b1 0.64% 95 #Choosing a library for your use case If you know which languages you need in advance: @phensley\/plurals and make-plural both ship a pre-compiled and pre-optimized set of rules for plurals. They\u2019re the fastest options and will be the smallest if your build system can perform Tree Shaking. If you do not know the languages in advance. And speed is a concern: @onigoetz\/make-plural and its memoized alternative @onigoetz\/make-plural(memo) should do the trick. you will need to ship the pluralization rules one way or another to the function. And speed is not a concern: @onigoetz\/intl uses Intl.PluralRules that ships with most browsers and Node.js runtimes but as you can see it\u2019s much slower than other solutions.","tags":"","url":"Benchmark_plural.html"}]});